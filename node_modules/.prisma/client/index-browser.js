
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  googleId: 'googleId',
  appleId: 'appleId',
  profilePicture: 'profilePicture',
  authProvider: 'authProvider'
};

exports.Prisma.OTPCodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  codeHash: 'codeHash',
  purpose: 'purpose',
  deliveryMethod: 'deliveryMethod',
  expiresAt: 'expiresAt',
  isUsed: 'isUsed',
  attemptsCount: 'attemptsCount',
  maxAttempts: 'maxAttempts',
  createdAt: 'createdAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshTokenHash: 'refreshTokenHash',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.ExecutiveScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeId: 'employeeId',
  territory: 'territory',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PetOwnerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  countryCode: 'countryCode',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PetSpeciesScalarFieldEnum = {
  id: 'id',
  speciesName: 'speciesName',
  category: 'category'
};

exports.Prisma.PetBreedScalarFieldEnum = {
  id: 'id',
  breedName: 'breedName',
  speciesId: 'speciesId',
  sizeCategory: 'sizeCategory',
  typicalLifespanYears: 'typicalLifespanYears'
};

exports.Prisma.PetScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  registeredBy: 'registeredBy',
  name: 'name',
  speciesId: 'speciesId',
  breed_id: 'breed_id',
  secondary_breed_id: 'secondary_breed_id',
  gender: 'gender',
  birthDate: 'birthDate',
  color: 'color',
  weightKg: 'weightKg',
  heightCm: 'heightCm',
  distinctiveMarks: 'distinctiveMarks',
  isSpayedNeutered: 'isSpayedNeutered',
  microchip_id: 'microchip_id',
  registrationNumber: 'registrationNumber',
  status: 'status',
  specialNeeds: 'specialNeeds',
  behavioralNotes: 'behavioralNotes',
  profileImageUrl: 'profileImageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VaccineTypeScalarFieldEnum = {
  id: 'id',
  vaccineName: 'vaccineName',
  speciesApplicability: 'speciesApplicability',
  durationMonths: 'durationMonths',
  isRequiredByLaw: 'isRequiredByLaw'
};

exports.Prisma.VaccinationRecordScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  vaccineTypeId: 'vaccineTypeId',
  administeredDate: 'administeredDate',
  expirationDate: 'expirationDate',
  batchNumber: 'batchNumber',
  veterinarianName: 'veterinarianName',
  clinicName: 'clinicName',
  notes: 'notes',
  certificateUrl: 'certificateUrl',
  createdAt: 'createdAt'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  visitDate: 'visitDate',
  veterinarianName: 'veterinarianName',
  clinicName: 'clinicName',
  diagnosis: 'diagnosis',
  treatment: 'treatment',
  medications: 'medications',
  followUpRequired: 'followUpRequired',
  followUpDate: 'followUpDate',
  cost: 'cost',
  documentUrls: 'documentUrls',
  createdAt: 'createdAt'
};

exports.Prisma.QRCodePoolScalarFieldEnum = {
  id: 'id',
  poolName: 'poolName',
  totalCapacity: 'totalCapacity',
  usedCount: 'usedCount',
  createdAt: 'createdAt',
  status: 'status'
};

exports.Prisma.QRCodeScalarFieldEnum = {
  id: 'id',
  poolId: 'poolId',
  qrCodeString: 'qrCodeString',
  qrCodeHash: 'qrCodeHash',
  qrImageUrl: 'qrImageUrl',
  status: 'status',
  assignedToPet: 'assignedToPet',
  assignedAt: 'assignedAt',
  activatedAt: 'activatedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.QRScanEventScalarFieldEnum = {
  id: 'id',
  qrId: 'qrId',
  petId: 'petId',
  scanTimestamp: 'scanTimestamp',
  scannerIp: 'scannerIp',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  scanLocation: 'scanLocation',
  locationAccuracy: 'locationAccuracy',
  locationName: 'locationName',
  countryCode: 'countryCode',
  city: 'city',
  scannerContactInfo: 'scannerContactInfo',
  scanResult: 'scanResult',
  createdAt: 'createdAt'
};

exports.Prisma.PetLocationEventScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  qrScanId: 'qrScanId',
  latitude: 'latitude',
  longitude: 'longitude',
  accuracy: 'accuracy',
  scannerIp: 'scannerIp',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  locationName: 'locationName',
  countryCode: 'countryCode',
  city: 'city',
  state: 'state',
  scannerContactInfo: 'scannerContactInfo',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  razorpayOrderId: 'razorpayOrderId',
  userId: 'userId',
  receipt: 'receipt',
  amountInPaise: 'amountInPaise',
  currency: 'currency',
  status: 'status',
  notes: 'notes',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  rawOrderPayload: 'rawOrderPayload'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  localOrderId: 'localOrderId',
  razorpayPaymentId: 'razorpayPaymentId',
  razorpayOrderId: 'razorpayOrderId',
  amountInPaise: 'amountInPaise',
  currency: 'currency',
  method: 'method',
  status: 'status',
  captured: 'captured',
  capturedAt: 'capturedAt',
  bank: 'bank',
  vpa: 'vpa',
  card: 'card',
  fee: 'fee',
  tax: 'tax',
  currencyConversion: 'currencyConversion',
  signatureValid: 'signatureValid',
  signatureVerifiedAt: 'signatureVerifiedAt',
  verificationMethod: 'verificationMethod',
  rawPaymentPayload: 'rawPaymentPayload',
  clientMeta: 'clientMeta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  razorpayRefundId: 'razorpayRefundId',
  razorpayPaymentId: 'razorpayPaymentId',
  paymentEventId: 'paymentEventId',
  amountInPaise: 'amountInPaise',
  refundAmount: 'refundAmount',
  reason: 'reason',
  initiatedBy: 'initiatedBy',
  status: 'status',
  processedAt: 'processedAt',
  rawRefundPayload: 'rawRefundPayload',
  createdAt: 'createdAt'
};

exports.Prisma.WebhookEventScalarFieldEnum = {
  id: 'id',
  razorpayEventId: 'razorpayEventId',
  eventType: 'eventType',
  rawEvent: 'rawEvent',
  headers: 'headers',
  signatureValid: 'signatureValid',
  receivedAt: 'receivedAt',
  processedAt: 'processedAt',
  processingResult: 'processingResult'
};

exports.Prisma.PaymentWebhookScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  eventType: 'eventType',
  entityType: 'entityType',
  entityId: 'entityId',
  payload: 'payload',
  signature: 'signature',
  signatureVerified: 'signatureVerified',
  processed: 'processed',
  processedAt: 'processedAt',
  processingAttempts: 'processingAttempts',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  petId: 'petId',
  qrId: 'qrId',
  amount: 'amount',
  currency: 'currency',
  paymentPurpose: 'paymentPurpose',
  status: 'status',
  razorpayOrderId: 'razorpayOrderId',
  razorpayPaymentId: 'razorpayPaymentId',
  razorpaySignature: 'razorpaySignature',
  paymentMethod: 'paymentMethod',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.LocationTrackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  locationType: 'locationType',
  position: 'position',
  accuracy: 'accuracy',
  locationName: 'locationName',
  countryCode: 'countryCode',
  state: 'state',
  city: 'city',
  ipAddress: 'ipAddress',
  deviceInfo: 'deviceInfo',
  timestamp: 'timestamp'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  userId: 'userId',
  pushEnabled: 'pushEnabled',
  emailEnabled: 'emailEnabled',
  smsEnabled: 'smsEnabled',
  scanNotifications: 'scanNotifications',
  marketingNotifications: 'marketingNotifications',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  timezone: 'timezone',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  petId: 'petId',
  qrScanId: 'qrScanId',
  notificationType: 'notificationType',
  title: 'title',
  message: 'message',
  channels: 'channels',
  deliveryStatus: 'deliveryStatus',
  metadata: 'metadata',
  createdAt: 'createdAt',
  sentAt: 'sentAt',
  readAt: 'readAt'
};

exports.Prisma.DeviceTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceToken: 'deviceToken',
  platform: 'platform',
  deviceInfo: 'deviceInfo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  ticketNumber: 'ticketNumber',
  userId: 'userId',
  petId: 'petId',
  subject: 'subject',
  description: 'description',
  category: 'category',
  priority: 'priority',
  status: 'status',
  assignedTo: 'assignedTo',
  resolution: 'resolution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.SupportMessageScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  senderId: 'senderId',
  senderType: 'senderType',
  message: 'message',
  attachments: 'attachments',
  isInternal: 'isInternal',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  operationType: 'operationType',
  oldValues: 'oldValues',
  newValues: 'newValues',
  changedColumns: 'changedColumns',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.SystemAnalyticsScalarFieldEnum = {
  id: 'id',
  metricName: 'metricName',
  metricValue: 'metricValue',
  metricUnit: 'metricUnit',
  dimensions: 'dimensions',
  timestamp: 'timestamp'
};

exports.Prisma.PetRegistrationApplicationScalarFieldEnum = {
  id: 'id',
  applicationType: 'applicationType',
  identifierType: 'identifierType',
  identifierNumber: 'identifierNumber',
  submittedAt: 'submittedAt',
  city: 'city',
  state: 'state',
  country: 'country',
  applicantType: 'applicantType',
  applicantName: 'applicantName',
  fatherOrHusbandName: 'fatherOrHusbandName',
  applicantEmail: 'applicantEmail',
  applicantPhone: 'applicantPhone',
  aadhaarNumber: 'aadhaarNumber',
  pincode: 'pincode',
  address: 'address',
  hasTokenNumber: 'hasTokenNumber',
  declarationAcknowledgement: 'declarationAcknowledgement',
  acceptedTerms: 'acceptedTerms',
  registrationFee: 'registrationFee',
  convenienceFee: 'convenienceFee',
  gst: 'gst',
  totalAmount: 'totalAmount',
  currency: 'currency',
  deliveryAddressLine: 'deliveryAddressLine',
  deliveryCity: 'deliveryCity',
  deliveryState: 'deliveryState',
  deliveryPincode: 'deliveryPincode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegisteredPetScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  petName: 'petName',
  breed: 'breed',
  dateOfBirth: 'dateOfBirth',
  ageOnRegistration: 'ageOnRegistration',
  lastRabiesVaccinationDate: 'lastRabiesVaccinationDate',
  veterinaryDoctorName: 'veterinaryDoctorName',
  veterinaryDoctorRegNumber: 'veterinaryDoctorRegNumber',
  veterinaryClinicOrHospitalName: 'veterinaryClinicOrHospitalName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  gender: 'gender'
};

exports.Prisma.ApplicationDocumentScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  documentType: 'documentType',
  fileName: 'fileName',
  filePath: 'filePath',
  mimeType: 'mimeType',
  sizeBytes: 'sizeBytes',
  createdAt: 'createdAt'
};

exports.Prisma.PetDocumentScalarFieldEnum = {
  id: 'id',
  petId: 'petId',
  documentType: 'documentType',
  fileName: 'fileName',
  filePath: 'filePath',
  mimeType: 'mimeType',
  sizeBytes: 'sizeBytes',
  createdAt: 'createdAt'
};

exports.Prisma.CheckoutItemScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  sku: 'sku',
  itemName: 'itemName',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  pet_owner: 'pet_owner',
  executive: 'executive',
  admin: 'admin'
};

exports.AuthProvider = exports.$Enums.AuthProvider = {
  phone: 'phone',
  email: 'email',
  google: 'google',
  apple: 'apple'
};

exports.OTPPurpose = exports.$Enums.OTPPurpose = {
  login: 'login',
  registration: 'registration',
  phone_verification: 'phone_verification',
  email_verification: 'email_verification',
  password_reset: 'password_reset'
};

exports.SizeCategory = exports.$Enums.SizeCategory = {
  toy: 'toy',
  small: 'small',
  medium: 'medium',
  large: 'large',
  giant: 'giant'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  unknown: 'unknown',
  Male: 'Male',
  Female: 'Female'
};

exports.PetStatus = exports.$Enums.PetStatus = {
  active: 'active',
  lost: 'lost',
  found: 'found',
  deceased: 'deceased',
  inactive: 'inactive'
};

exports.PoolStatus = exports.$Enums.PoolStatus = {
  active: 'active',
  depleted: 'depleted',
  archived: 'archived'
};

exports.QRStatus = exports.$Enums.QRStatus = {
  available: 'available',
  assigned: 'assigned',
  active: 'active',
  expired: 'expired',
  revoked: 'revoked'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  mobile: 'mobile',
  tablet: 'tablet',
  desktop: 'desktop'
};

exports.ScanResult = exports.$Enums.ScanResult = {
  success: 'success',
  invalid: 'invalid',
  expired: 'expired'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  created: 'created',
  paid: 'paid',
  partially_paid: 'partially_paid',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.PaymentStatusNew = exports.$Enums.PaymentStatusNew = {
  created: 'created',
  authorized: 'authorized',
  captured: 'captured',
  failed: 'failed',
  refunded: 'refunded',
  disputed: 'disputed',
  canceled: 'canceled'
};

exports.VerificationMethod = exports.$Enums.VerificationMethod = {
  hmac: 'hmac',
  fetch_api: 'fetch_api'
};

exports.RefundStatus = exports.$Enums.RefundStatus = {
  initiated: 'initiated',
  processing: 'processing',
  processed: 'processed',
  failed: 'failed'
};

exports.PaymentPurpose = exports.$Enums.PaymentPurpose = {
  qr_registration: 'qr_registration',
  premium_features: 'premium_features',
  vet_consultation: 'vet_consultation',
  pet_registration: 'pet_registration',
  pet_tag: 'pet_tag'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  initiated: 'initiated',
  processing: 'processing',
  success: 'success',
  failed: 'failed',
  refunded: 'refunded'
};

exports.LocationType = exports.$Enums.LocationType = {
  login: 'login',
  scan: 'scan',
  manual: 'manual'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  qr_scan: 'qr_scan',
  payment_success: 'payment_success',
  system_alert: 'system_alert',
  marketing: 'marketing'
};

exports.Platform = exports.$Enums.Platform = {
  ios: 'ios',
  android: 'android',
  web: 'web'
};

exports.TicketCategory = exports.$Enums.TicketCategory = {
  technical: 'technical',
  billing: 'billing',
  pet_related: 'pet_related',
  general: 'general'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  open: 'open',
  in_progress: 'in_progress',
  waiting_user: 'waiting_user',
  resolved: 'resolved',
  closed: 'closed'
};

exports.SenderType = exports.$Enums.SenderType = {
  user: 'user',
  support: 'support',
  system: 'system'
};

exports.OperationType = exports.$Enums.OperationType = {
  INSERT: 'INSERT',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE'
};

exports.ApplicationType = exports.$Enums.ApplicationType = {
  new: 'new',
  renewal: 'renewal'
};

exports.IdentifierType = exports.$Enums.IdentifierType = {
  token_or_license: 'token_or_license',
  microchip: 'microchip',
  registration_number: 'registration_number'
};

exports.ApplicantType = exports.$Enums.ApplicantType = {
  Owner: 'Owner',
  Guardian: 'Guardian',
  Caretaker: 'Caretaker'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  pet_photo: 'pet_photo',
  rabies_certificate: 'rabies_certificate',
  aadhaar_card: 'aadhaar_card',
  signature: 'signature',
  other: 'other'
};

exports.Prisma.ModelName = {
  User: 'User',
  OTPCode: 'OTPCode',
  UserSession: 'UserSession',
  Executive: 'Executive',
  PetOwner: 'PetOwner',
  PetSpecies: 'PetSpecies',
  PetBreed: 'PetBreed',
  Pet: 'Pet',
  VaccineType: 'VaccineType',
  VaccinationRecord: 'VaccinationRecord',
  MedicalRecord: 'MedicalRecord',
  QRCodePool: 'QRCodePool',
  QRCode: 'QRCode',
  QRScanEvent: 'QRScanEvent',
  PetLocationEvent: 'PetLocationEvent',
  Order: 'Order',
  Payment: 'Payment',
  Refund: 'Refund',
  WebhookEvent: 'WebhookEvent',
  PaymentWebhook: 'PaymentWebhook',
  PaymentEvent: 'PaymentEvent',
  LocationTrack: 'LocationTrack',
  NotificationPreference: 'NotificationPreference',
  Notification: 'Notification',
  DeviceToken: 'DeviceToken',
  SupportTicket: 'SupportTicket',
  SupportMessage: 'SupportMessage',
  AuditLog: 'AuditLog',
  SystemAnalytics: 'SystemAnalytics',
  PetRegistrationApplication: 'PetRegistrationApplication',
  RegisteredPet: 'RegisteredPet',
  ApplicationDocument: 'ApplicationDocument',
  PetDocument: 'PetDocument',
  CheckoutItem: 'CheckoutItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
