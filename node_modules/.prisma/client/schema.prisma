generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String?                 @unique @db.VarChar(255)
  phone             String?                 @unique @db.VarChar(20)
  firstName         String                  @map("first_name") @db.VarChar(100)
  lastName          String                  @map("last_name") @db.VarChar(100)
  role              UserRole                @default(pet_owner)
  isActive          Boolean                 @default(true) @map("is_active")
  emailVerified     Boolean                 @default(false) @map("email_verified")
  phoneVerified     Boolean                 @default(false) @map("phone_verified")
  lastLogin         DateTime?               @map("last_login")
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")
  googleId          String?                 @unique @map("google_id") @db.VarChar(255)
  appleId           String?                 @unique @map("apple_id") @db.VarChar(255)
  profilePicture    String?                 @map("profile_picture")
  authProvider      AuthProvider?           @map("auth_provider")
  auditLogs         AuditLog[]
  deviceTokens      DeviceToken[]
  executive         Executive?
  locationTracks    LocationTrack[]
  notificationPrefs NotificationPreference?
  notifications     Notification[]
  otpCodes          OTPCode[]
  paymentEvents     PaymentEvent[]
  petOwner          PetOwner?
  registeredPets    Pet[]                   @relation("RegisteredBy")
  refundsInitiated  Refund[]                @relation("InitiatedBy")
  supportMessages   SupportMessage[]
  assignedTickets   SupportTicket[]         @relation("AssignedTo")
  supportTickets    SupportTicket[]
  sessions          UserSession[]

  @@map("users")
}

model OTPCode {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String     @map("user_id") @db.Uuid
  codeHash       String     @map("code_hash") @db.VarChar(255)
  purpose        OTPPurpose
  deliveryMethod String?    @map("delivery_method") @db.VarChar(10)
  expiresAt      DateTime   @map("expires_at")
  isUsed         Boolean    @default(false) @map("is_used")
  attemptsCount  Int        @default(0) @map("attempts_count")
  maxAttempts    Int        @default(3) @map("max_attempts")
  createdAt      DateTime   @default(now()) @map("created_at")
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model UserSession {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  refreshTokenHash String   @map("refresh_token_hash") @db.VarChar(255)
  deviceInfo       Json?    @map("device_info")
  ipAddress        String?  @map("ip_address") @db.Inet
  expiresAt        DateTime @map("expires_at")
  createdAt        DateTime @default(now()) @map("created_at")
  lastUsedAt       DateTime @default(now()) @map("last_used_at")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Executive {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @unique @map("user_id") @db.Uuid
  employeeId String   @unique @map("employee_id") @db.VarChar(50)
  territory  String?  @db.VarChar(100)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("executives")
}

model PetOwner {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String   @unique @map("user_id") @db.Uuid
  addressLine1          String?  @map("address_line1") @db.VarChar(255)
  addressLine2          String?  @map("address_line2") @db.VarChar(255)
  city                  String?  @db.VarChar(100)
  state                 String?  @db.VarChar(100)
  postalCode            String?  @map("postal_code") @db.VarChar(20)
  countryCode           String   @default("IN") @map("country_code") @db.Char(2)
  emergencyContactName  String?  @map("emergency_contact_name") @db.VarChar(200)
  emergencyContactPhone String?  @map("emergency_contact_phone") @db.VarChar(20)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pets                  Pet[]

  @@map("pet_owners")
}

model PetSpecies {
  id          Int        @id @default(autoincrement())
  speciesName String     @unique @map("species_name") @db.VarChar(100)
  category    String     @db.VarChar(50)
  breeds      PetBreed[]
  pets        Pet[]

  @@map("pet_species")
}

model PetBreed {
  id                                       Int           @id @default(autoincrement())
  breedName                                String        @map("breed_name") @db.VarChar(100)
  speciesId                                Int           @map("species_id")
  sizeCategory                             SizeCategory? @map("size_category")
  typicalLifespanYears                     Int?          @map("typical_lifespan_years")
  species                                  PetSpecies    @relation(fields: [speciesId], references: [id])
  pets_pets_breed_idTopet_breeds           Pet[]         @relation("pets_breed_idTopet_breeds")
  pets_pets_secondary_breed_idTopet_breeds Pet[]         @relation("pets_secondary_breed_idTopet_breeds")

  @@map("pet_breeds")
}

model Pet {
  id                                             String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId                                        String              @map("owner_id") @db.Uuid
  registeredBy                                   String?             @map("registered_by") @db.Uuid
  name                                           String              @db.VarChar(100)
  speciesId                                      Int?                @map("species_id")
  breed_id                                       Int?
  secondary_breed_id                             Int?
  gender                                         Gender
  birthDate                                      DateTime?           @map("birth_date") @db.Date
  color                                          String?             @db.VarChar(100)
  weightKg                                       Decimal?            @map("weight_kg") @db.Decimal(5, 2)
  heightCm                                       Decimal?            @map("height_cm") @db.Decimal(5, 2)
  distinctiveMarks                               String?             @map("distinctive_marks")
  isSpayedNeutered                               Boolean?            @map("is_spayed_neutered")
  microchip_id                                   String?             @unique @db.VarChar(15)
  registrationNumber                             String?             @unique @map("registration_number") @db.VarChar(50)
  status                                         PetStatus           @default(active)
  specialNeeds                                   String?             @map("special_needs")
  behavioralNotes                                String?             @map("behavioral_notes")
  profileImageUrl                                String?             @map("profile_image_url") @db.VarChar(500)
  createdAt                                      DateTime            @default(now()) @map("created_at")
  updatedAt                                      DateTime            @updatedAt @map("updated_at")
  medicalRecords                                 MedicalRecord[]
  notifications                                  Notification[]
  paymentEvents                                  PaymentEvent[]
  locationEvents                                 PetLocationEvent[]
  pet_breeds_pets_breed_idTopet_breeds           PetBreed?           @relation("pets_breed_idTopet_breeds", fields: [breed_id], references: [id])
  owner                                          PetOwner            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  registeredByUser                               User?               @relation("RegisteredBy", fields: [registeredBy], references: [id])
  pet_breeds_pets_secondary_breed_idTopet_breeds PetBreed?           @relation("pets_secondary_breed_idTopet_breeds", fields: [secondary_breed_id], references: [id])
  species                                        PetSpecies?         @relation(fields: [speciesId], references: [id])
  qrCodes                                        QRCode[]
  supportTickets                                 SupportTicket[]
  vaccinationRecords                             VaccinationRecord[]

  @@map("pets")
}

model VaccineType {
  id                   Int                 @id @default(autoincrement())
  vaccineName          String              @map("vaccine_name") @db.VarChar(100)
  speciesApplicability Int[]               @map("species_applicability")
  durationMonths       Int?                @map("duration_months")
  isRequiredByLaw      Boolean             @default(false) @map("is_required_by_law")
  vaccinationRecords   VaccinationRecord[]

  @@map("vaccine_types")
}

model VaccinationRecord {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  petId            String      @map("pet_id") @db.Uuid
  vaccineTypeId    Int         @map("vaccine_type_id")
  administeredDate DateTime    @map("administered_date") @db.Date
  expirationDate   DateTime?   @map("expiration_date") @db.Date
  batchNumber      String?     @map("batch_number") @db.VarChar(50)
  veterinarianName String?     @map("veterinarian_name") @db.VarChar(200)
  clinicName       String?     @map("clinic_name") @db.VarChar(200)
  notes            String?
  certificateUrl   String?     @map("certificate_url") @db.VarChar(500)
  createdAt        DateTime    @default(now()) @map("created_at")
  pet              Pet         @relation(fields: [petId], references: [id], onDelete: Cascade)
  vaccineType      VaccineType @relation(fields: [vaccineTypeId], references: [id])

  @@map("vaccination_records")
}

model MedicalRecord {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  petId            String    @map("pet_id") @db.Uuid
  visitDate        DateTime  @map("visit_date") @db.Date
  veterinarianName String?   @map("veterinarian_name") @db.VarChar(200)
  clinicName       String?   @map("clinic_name") @db.VarChar(200)
  diagnosis        String?
  treatment        String?
  medications      Json?
  followUpRequired Boolean   @default(false) @map("follow_up_required")
  followUpDate     DateTime? @map("follow_up_date") @db.Date
  cost             Decimal?  @db.Decimal(10, 2)
  documentUrls     String[]  @map("document_urls")
  createdAt        DateTime  @default(now()) @map("created_at")
  pet              Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model QRCodePool {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poolName      String     @map("pool_name") @db.VarChar(255)
  totalCapacity Int        @map("total_capacity")
  usedCount     Int        @default(0) @map("used_count")
  createdAt     DateTime   @default(now()) @map("created_at")
  status        PoolStatus @default(active)
  qrCodes       QRCode[]

  @@map("qr_code_pools")
}

model QRCode {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poolId        String?        @map("pool_id") @db.Uuid
  qrCodeString  String         @unique @map("qr_code_string") @db.VarChar(255)
  qrCodeHash    String         @unique @map("qr_code_hash") @db.VarChar(64)
  qrImageUrl    String?        @map("qr_image_url") @db.VarChar(500)
  status        QRStatus       @default(available)
  assignedToPet String?        @map("assigned_to_pet") @db.Uuid
  assignedAt    DateTime?      @map("assigned_at")
  activatedAt   DateTime?      @map("activated_at")
  expiresAt     DateTime?      @map("expires_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  paymentEvents PaymentEvent[]
  pet           Pet?           @relation(fields: [assignedToPet], references: [id])
  pool          QRCodePool?    @relation(fields: [poolId], references: [id])
  scanEvents    QRScanEvent[]

  @@map("qr_codes")
}

model QRScanEvent {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qrId               String      @map("qr_id") @db.Uuid
  scanTimestamp      DateTime    @default(now()) @map("scan_timestamp")
  scannerIp          String?     @map("scanner_ip") @db.Inet
  userAgent          String?     @map("user_agent")
  deviceType         DeviceType? @default(mobile) @map("device_type")
  scanLocation       String?     @map("scan_location")
  locationAccuracy   Decimal?    @map("location_accuracy") @db.Decimal(8, 2)
  locationName       String?     @map("location_name") @db.VarChar(255)
  countryCode        String?     @map("country_code") @db.Char(2)
  city               String?     @db.VarChar(100)
  scannerContactInfo Json?       @map("scanner_contact_info")
  scanResult         ScanResult
  createdAt          DateTime    @default(now()) @map("created_at")
  qrCode             QRCode      @relation(fields: [qrId], references: [id])

  @@map("qr_scan_events")
}

model PetLocationEvent {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  petId              String      @map("pet_id") @db.Uuid
  latitude           Decimal     @db.Decimal(10, 8)
  longitude          Decimal     @db.Decimal(11, 8)
  accuracy           Decimal?    @db.Decimal(8, 2)
  scannerIp          String?     @map("scanner_ip") @db.Inet
  userAgent          String?     @map("user_agent")
  deviceType         DeviceType? @default(mobile) @map("device_type")
  locationName       String?     @map("location_name") @db.VarChar(255)
  countryCode        String?     @map("country_code") @db.Char(2)
  city               String?     @db.VarChar(100)
  state              String?     @db.VarChar(100)
  scannerContactInfo Json?       @map("scanner_contact_info")
  createdAt          DateTime    @default(now()) @map("created_at")
  pet                Pet         @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("pet_location_events")
}

model PaymentEvent {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String?        @map("user_id") @db.Uuid
  petId             String?        @map("pet_id") @db.Uuid
  qrId              String?        @map("qr_id") @db.Uuid
  amount            Decimal        @db.Decimal(15, 4)
  currency          String         @default("INR") @db.VarChar(3)
  paymentPurpose    PaymentPurpose @map("payment_purpose")
  status            PaymentStatus  @default(initiated)
  razorpayOrderId   String?        @map("razorpay_order_id") @db.VarChar(50)
  razorpayPaymentId String?        @map("razorpay_payment_id") @db.VarChar(50)
  razorpaySignature String?        @map("razorpay_signature") @db.VarChar(500)
  paymentMethod     String?        @map("payment_method") @db.VarChar(50)
  failureReason     String?        @map("failure_reason")
  createdAt         DateTime       @default(now()) @map("created_at")
  completedAt       DateTime?      @map("completed_at")
  pet               Pet?           @relation(fields: [petId], references: [id])
  qrCode            QRCode?        @relation(fields: [qrId], references: [id])
  user              User?          @relation(fields: [userId], references: [id])
  refunds           Refund[]

  @@map("payment_events")
}

model PaymentWebhook {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId            String    @unique @map("event_id") @db.VarChar(50)
  eventType          String    @map("event_type") @db.VarChar(50)
  entityType         String    @map("entity_type") @db.VarChar(20)
  entityId           String    @map("entity_id") @db.VarChar(50)
  payload            Json
  signature          String    @db.VarChar(500)
  signatureVerified  Boolean   @default(false) @map("signature_verified")
  processed          Boolean   @default(false)
  processingAttempts Int       @default(0) @map("processing_attempts")
  createdAt          DateTime  @default(now()) @map("created_at")
  processedAt        DateTime? @map("processed_at")

  @@map("payment_webhooks")
}

model Refund {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paymentEventId   String       @map("payment_event_id") @db.Uuid
  razorpayRefundId String?      @map("razorpay_refund_id") @db.VarChar(50)
  refundAmount     Decimal      @map("refund_amount") @db.Decimal(15, 4)
  reason           String?      @db.VarChar(200)
  status           RefundStatus @default(initiated)
  initiatedBy      String?      @map("initiated_by") @db.Uuid
  createdAt        DateTime     @default(now()) @map("created_at")
  processedAt      DateTime?    @map("processed_at")
  initiatedByUser  User?        @relation("InitiatedBy", fields: [initiatedBy], references: [id])
  paymentEvent     PaymentEvent @relation(fields: [paymentEventId], references: [id])

  @@map("refunds")
}

model LocationTrack {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?      @map("user_id") @db.Uuid
  locationType LocationType @map("location_type")
  position     String?
  accuracy     Decimal?     @db.Decimal(8, 2)
  locationName String?      @map("location_name") @db.VarChar(255)
  countryCode  String?      @map("country_code") @db.Char(2)
  state        String?      @db.VarChar(100)
  city         String?      @db.VarChar(100)
  ipAddress    String?      @map("ip_address") @db.Inet
  deviceInfo   Json?        @map("device_info")
  timestamp    DateTime     @default(now())
  user         User?        @relation(fields: [userId], references: [id])

  @@map("location_tracks")
}

model NotificationPreference {
  userId                 String    @id @map("user_id") @db.Uuid
  pushEnabled            Boolean   @default(true) @map("push_enabled")
  emailEnabled           Boolean   @default(true) @map("email_enabled")
  smsEnabled             Boolean   @default(false) @map("sms_enabled")
  scanNotifications      Boolean   @default(true) @map("scan_notifications")
  marketingNotifications Boolean   @default(false) @map("marketing_notifications")
  quietHoursStart        DateTime? @map("quiet_hours_start") @db.Time(6)
  quietHoursEnd          DateTime? @map("quiet_hours_end") @db.Time(6)
  timezone               String    @default("Asia/Kolkata") @db.VarChar(50)
  updatedAt              DateTime  @updatedAt @map("updated_at")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model Notification {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String?          @map("user_id") @db.Uuid
  petId            String?          @map("pet_id") @db.Uuid
  qrScanId         String?          @map("qr_scan_id") @db.Uuid
  notificationType NotificationType @map("notification_type")
  title            String           @db.VarChar(255)
  message          String
  channels         String[]         @default(["push"])
  deliveryStatus   Json?            @map("delivery_status")
  metadata         Json?
  createdAt        DateTime         @default(now()) @map("created_at")
  sentAt           DateTime?        @map("sent_at")
  readAt           DateTime?        @map("read_at")
  pet              Pet?             @relation(fields: [petId], references: [id])
  user             User?            @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model DeviceToken {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  deviceToken String   @map("device_token") @db.VarChar(500)
  platform    Platform
  deviceInfo  Json?    @map("device_info")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsedAt  DateTime @default(now()) @map("last_used_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_tokens")
}

model SupportTicket {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketNumber   String           @unique @map("ticket_number") @db.VarChar(20)
  userId         String?          @map("user_id") @db.Uuid
  petId          String?          @map("pet_id") @db.Uuid
  subject        String           @db.VarChar(255)
  description    String
  category       TicketCategory
  priority       TicketPriority   @default(medium)
  status         TicketStatus     @default(open)
  assignedTo     String?          @map("assigned_to") @db.Uuid
  resolution     String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  resolvedAt     DateTime?        @map("resolved_at")
  messages       SupportMessage[]
  assignedToUser User?            @relation("AssignedTo", fields: [assignedTo], references: [id])
  pet            Pet?             @relation(fields: [petId], references: [id])
  user           User?            @relation(fields: [userId], references: [id])

  @@map("support_tickets")
}

model SupportMessage {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketId    String        @map("ticket_id") @db.Uuid
  senderId    String?       @map("sender_id") @db.Uuid
  senderType  SenderType    @map("sender_type")
  message     String
  attachments String[]
  isInternal  Boolean       @default(false) @map("is_internal")
  createdAt   DateTime      @default(now()) @map("created_at")
  sender      User?         @relation(fields: [senderId], references: [id])
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("support_messages")
}

model AuditLog {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tableName      String        @map("table_name") @db.VarChar(64)
  recordId       String        @map("record_id") @db.Uuid
  operationType  OperationType @map("operation_type")
  oldValues      Json?         @map("old_values")
  newValues      Json?         @map("new_values")
  changedColumns String[]      @map("changed_columns")
  userId         String?       @map("user_id") @db.Uuid
  ipAddress      String?       @map("ip_address") @db.Inet
  userAgent      String?       @map("user_agent")
  timestamp      DateTime      @default(now())
  user           User?         @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SystemAnalytics {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metricName  String   @map("metric_name") @db.VarChar(100)
  metricValue Decimal? @map("metric_value") @db.Decimal(15, 4)
  metricUnit  String?  @map("metric_unit") @db.VarChar(20)
  dimensions  Json?
  timestamp   DateTime @default(now())

  @@map("system_analytics")
}

model PetRegistrationApplication {
  id                         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationType            ApplicationType       @map("application_type")
  identifierType             IdentifierType        @map("identifier_type")
  identifierNumber           String?               @map("identifier_number") @db.VarChar(50)
  submittedAt                DateTime              @map("submitted_at")
  city                       String                @db.VarChar(100)
  state                      String                @db.VarChar(100)
  country                    String                @db.VarChar(100)
  applicantType              ApplicantType         @map("applicant_type")
  applicantName              String                @map("applicant_name") @db.VarChar(200)
  fatherOrHusbandName        String?               @map("father_or_husband_name") @db.VarChar(200)
  applicantEmail             String                @map("applicant_email") @db.VarChar(255)
  applicantPhone             String                @map("applicant_phone") @db.VarChar(20)
  aadhaarNumber              String?               @map("aadhaar_number") @db.VarChar(20)
  pincode                    String                @db.VarChar(10)
  address                    String
  hasTokenNumber             Boolean               @default(false) @map("has_token_number")
  declarationAcknowledgement String                @map("declaration_acknowledgement")
  acceptedTerms              Boolean               @default(false) @map("accepted_terms")
  registrationFee            Decimal               @map("registration_fee") @db.Decimal(10, 2)
  convenienceFee             Decimal               @map("convenience_fee") @db.Decimal(10, 2)
  gst                        Decimal               @db.Decimal(10, 2)
  totalAmount                Decimal               @map("total_amount") @db.Decimal(10, 2)
  currency                   String                @default("INR") @db.VarChar(3)
  deliveryAddressLine        String                @map("delivery_address_line")
  deliveryCity               String                @map("delivery_city") @db.VarChar(100)
  deliveryState              String                @map("delivery_state") @db.VarChar(100)
  deliveryPincode            String                @map("delivery_pincode") @db.VarChar(10)
  createdAt                  DateTime              @default(now()) @map("created_at")
  updatedAt                  DateTime              @updatedAt @map("updated_at")
  documents                  ApplicationDocument[]
  checkoutItems              CheckoutItem[]
  pets                       RegisteredPet[]

  @@map("pet_registration_applications")
}

model RegisteredPet {
  id                             String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationId                  String                     @map("application_id") @db.Uuid
  petName                        String                     @map("pet_name") @db.VarChar(100)
  breed                          String                     @db.VarChar(100)
  dateOfBirth                    DateTime                   @map("date_of_birth") @db.Date
  ageOnRegistration              String                     @map("age_on_registration") @db.VarChar(20)
  lastRabiesVaccinationDate      DateTime                   @map("last_rabies_vaccination_date") @db.Date
  veterinaryDoctorName           String                     @map("veterinary_doctor_name") @db.VarChar(200)
  veterinaryDoctorRegNumber      String                     @map("veterinary_doctor_reg_number") @db.VarChar(100)
  veterinaryClinicOrHospitalName String                     @map("veterinary_clinic_or_hospital_name") @db.VarChar(200)
  createdAt                      DateTime                   @default(now()) @map("created_at")
  updatedAt                      DateTime                   @updatedAt @map("updated_at")
  gender                         Gender
  documents                      PetDocument[]
  application                    PetRegistrationApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("registered_pets")
}

model ApplicationDocument {
  id            String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationId String                     @map("application_id") @db.Uuid
  documentType  DocumentType               @map("document_type")
  fileName      String                     @map("file_name") @db.VarChar(255)
  filePath      String                     @map("file_path") @db.VarChar(500)
  mimeType      String                     @map("mime_type") @db.VarChar(100)
  sizeBytes     BigInt                     @map("size_bytes")
  createdAt     DateTime                   @default(now()) @map("created_at")
  application   PetRegistrationApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_documents")
}

model PetDocument {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  petId        String        @map("pet_id") @db.Uuid
  documentType DocumentType  @map("document_type")
  fileName     String        @map("file_name") @db.VarChar(255)
  filePath     String        @map("file_path") @db.VarChar(500)
  mimeType     String        @map("mime_type") @db.VarChar(100)
  sizeBytes    BigInt        @map("size_bytes")
  createdAt    DateTime      @default(now()) @map("created_at")
  pet          RegisteredPet @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("pet_documents")
}

model CheckoutItem {
  id            String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  applicationId String                     @map("application_id") @db.Uuid
  sku           String                     @db.VarChar(50)
  itemName      String                     @map("item_name") @db.VarChar(255)
  quantity      Int                        @default(1)
  unitPrice     Decimal                    @map("unit_price") @db.Decimal(10, 2)
  createdAt     DateTime                   @default(now()) @map("created_at")
  application   PetRegistrationApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("checkout_items")
}

enum UserRole {
  pet_owner
  executive
  admin
}

enum OTPPurpose {
  login
  registration
  phone_verification
  email_verification
  password_reset
}

enum AuthProvider {
  phone
  email
  google
  apple
}

enum Gender {
  male
  female
  unknown
  Male
  Female
}

enum PetStatus {
  active
  lost
  found
  deceased
  inactive
}

enum SizeCategory {
  toy
  small
  medium
  large
  giant
}

enum QRStatus {
  available
  assigned
  active
  expired
  revoked
}

enum PaymentStatus {
  initiated
  processing
  success
  failed
  refunded
}

enum PaymentPurpose {
  qr_registration
  premium_features
  vet_consultation
  pet_registration
  pet_tag
}

enum RefundStatus {
  initiated
  processing
  processed
  failed
}

enum NotificationType {
  qr_scan
  payment_success
  system_alert
  marketing
}

enum Platform {
  ios
  android
  web
}

enum TicketCategory {
  technical
  billing
  pet_related
  general
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum TicketStatus {
  open
  in_progress
  waiting_user
  resolved
  closed
}

enum SenderType {
  user
  support
  system
}

enum LocationType {
  login
  scan
  manual
}

enum DeviceType {
  mobile
  tablet
  desktop
}

enum ScanResult {
  success
  invalid
  expired
}

enum PoolStatus {
  active
  depleted
  archived
}

enum ApplicationType {
  new
  renewal
}

enum IdentifierType {
  token_or_license
  microchip
  registration_number
}

enum ApplicantType {
  Owner
  Guardian
  Caretaker
}

enum DocumentType {
  pet_photo
  rabies_certificate
  aadhaar_card
  signature
  other
}

enum OperationType {
  INSERT
  UPDATE
  DELETE
}
